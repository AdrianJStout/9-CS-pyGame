#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Oliver Drayton

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Images
 :PROPERTIES:
 :HTML_CONTAINER_CLASS: activity
 :END:
** Download It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Start by picking up a fresh copy of the pyGame template file to use in this lesson, and save it in the directory you've been using for this topic: 
- [[./doc/pygameDevTemplate.py][Right click and save as - for a fresh template]]
- Create a folder called *Images* in your pygame folder.
- Right click on the image below and save it in your new *Images* folder
[[./img/gimp2.png]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Basic shapes is a good starting point, but images are much more fun.
- Using images as [[https://en.wikipedia.org/wiki/Sprite_(computer_graphics)][sprites]] is very simple in pyGame.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- The process for using an image in pyGame is as follows:
#+begin_src
Load the image into memory
Create a variable to hold the sprite's X and Y position on the screen

BEGIN GAME LOOP
    Set new X and Y coordinates for the image
    Display the image on the screen
#+end_src

- The graphic(s) we wish to load only need to be loaded into the computer's memory once. 
- If we loaded the file from the computer's hard drive 60 times a second, we would get very poor game performance.
- The process of painting the screen with our loaded image(s) is called /bit blitting/, or just '[[https://en.wikipedia.org/wiki/Bit_blit][blit]]' for short. 
- Start by adding this code just under line 16.
- *NOTE:* you can make line numbers appear next to your code by right-clicking the tall, thin grey empty area that sits just to the left of your code in pyCharm, then clicking 'Show line numbers':
#+begin_src python
player1Image = pygame.image.load("gimp2.png")
player1XY = [100, 100]
#+end_src

- Then add these lines under =line 27= to display (blit) the image on the screen:
- *NOTE:* Make sure these lines are indented, otherwise they won't work.
 #+begin_src python
    screen.fill(black)
    player1 = screen.blit(player1Image, player1XY)
#+end_src
- We now have a static image. To make it a little more interactive, let's  make the sprite follow the mouse. Weâ€™ve done this before but we are going to improve our method. 
- Add these two line underneath the =screen.fill(black)= command on line 28 (don't forget to indent!):
#+begin_src python
    mousePosition = pygame.mouse.get_pos()
    player1XY = mousePosition[0], mousePosition[1] 
#+end_src
- What do you think this is doing?
- Your code will now look something like this:
[[./img/5-3.png]]
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Our app is coming along, but we've a few improvements that are needed to make this better.
  - The mouse cursor isn't centred on the image,
  - The mouse cursor is visible, which looks unsightly,
  - The image is a little large. 
- Let's deal with the re-sizing of the image first. We can handle this at the top of our program, before we start our game loop. Our method will be:
#+begin_src
Store the size we want for the image in a variable 
Use pygame.image.transform to resize the image.
#+end_src
- Add these lines of code to the top of your program, under =player1XY = [100, 100]= over at line 18 (these lines don't need to be indented):
#+begin_src python
player1ImageSizeXY = [80, 60]
player1Image = pygame.transform.scale(player1Image, player1ImageSizeXY)
#+end_src
- The code will read something like this:
[[./img/5-4.PNG]]
- As we know the size of the image, we can use this to correct the mouse point position from our bug list.
- Our algorithm will be:
#+begin_src

#+end_src
[[./img/5-5.PNG]]
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Add comments to your code and discribe how using image size is useful in correcting the mouse pointer position
- *Gold:* Use the image below as your sprite, remember it has a different aspect ratio.
[[./doc/bird1.png]]
- *Platinum:* Use gimp2 to cut out an image from either of the sprite sheets below and add an alpha layer.
[[./doc/birdSprites.png]]
[[./doc/MarioSprites.png]]
